[{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007 Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://sfcheung.github.io/betaselectr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://sfcheung.github.io/betaselectr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shu Fai Cheung. Author, maintainer.","code":""},{"path":"https://sfcheung.github.io/betaselectr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cheung S (2024). betaselectr: Selective Standardization Structural Equation Models. R package version 0.0.1.2, https://sfcheung.github.io/betaselectr/.","code":"@Manual{,   title = {betaselectr: Selective Standardization in Structural Equation Models},   author = {Shu Fai Cheung},   year = {2024},   note = {R package version 0.0.1.2},   url = {https://sfcheung.github.io/betaselectr/}, }"},{"path":"https://sfcheung.github.io/betaselectr/index.html","id":"betaselectr-do-selective-standardization-in-structural-equation-models-and-regression-models","dir":"","previous_headings":"","what":"Selective Standardization in Structural Equation Models","title":"Selective Standardization in Structural Equation Models","text":"(Version 0.0.1.2, updated 2024-06-26, release history) computes Beta_Select, standardization structural equation models selected variables standardized. supports models moderation, well regression models. can form confidence intervals takes account standardization appropriately. information package, please visit GitHub page: https://sfcheung.github.io/betaselectr/","code":""},{"path":"https://sfcheung.github.io/betaselectr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Selective Standardization in Structural Equation Models","text":"INSTALL: work--progress. ready use.","code":""},{"path":"https://sfcheung.github.io/betaselectr/index.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Selective Standardization in Structural Equation Models","text":"suggestions found bugs, please feel feel open GitHub issue. Thanks.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/anova.lm_betaselect.html","id":null,"dir":"Reference","previous_headings":"","what":"ANOVA Tables for an 'lm_betaselect'-Class Object — anova.lm_betaselect","title":"ANOVA Tables for an 'lm_betaselect'-Class Object — anova.lm_betaselect","text":"Return analysis variance tables outputs lm_betaselect().","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/anova.lm_betaselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ANOVA Tables for an 'lm_betaselect'-Class Object — anova.lm_betaselect","text":"","code":"# S3 method for lm_betaselect anova(object, ..., type = c(\"beta\", \"standardized\", \"raw\", \"unstandardized\"))"},{"path":"https://sfcheung.github.io/betaselectr/reference/anova.lm_betaselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ANOVA Tables for an 'lm_betaselect'-Class Object — anova.lm_betaselect","text":"object output lm_betaselect(). ... Additional outputs lm_betaselect(). type String. \"unstandardized\" \"raw\", output standardization used \"beta\" \"standardized\", output selected variables standardized returned. Default \"beta\".","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/anova.lm_betaselect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ANOVA Tables for an 'lm_betaselect'-Class Object — anova.lm_betaselect","text":"returns object class anova, identical output stats::anova() structure.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/anova.lm_betaselect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"ANOVA Tables for an 'lm_betaselect'-Class Object — anova.lm_betaselect","text":"default, calls stats::anova() results selected variables standardized. setting type \"raw\" \"unstandardized\", calls stats::anova() results standardization.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/betaselectr/reference/anova.lm_betaselect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ANOVA Tables for an 'lm_betaselect'-Class Object — anova.lm_betaselect","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/anova.lm_betaselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ANOVA Tables for an 'lm_betaselect'-Class Object — anova.lm_betaselect","text":"","code":"data(data_test_mod_cat)  lm_beta_x <- lm_betaselect(dv ~ iv*mod + cov1 + cat1,                            data = data_test_mod_cat,                            to_standardize = \"iv\",                            do_boot = FALSE) anova(lm_beta_x) #> Analysis of Variance Table #>  #> Response: dv #>            Df    Sum Sq   Mean Sq  F value Pr(>F)     #> iv          1 302739738 302739738 652.6310 <2e-16 *** #> mod         1  40936174  40936174  88.2481 <2e-16 *** #> cov1        1    341505    341505   0.7362 0.3913     #> cat1        2   1118110    559055   1.2052 0.3005     #> iv:mod      1    946107    946107   2.0396 0.1539     #> Residuals 493 228690783    463876                     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 anova(lm_beta_x, type = \"raw\") #> Analysis of Variance Table #>  #> Response: dv #>            Df    Sum Sq   Mean Sq  F value Pr(>F)     #> iv          1 302739738 302739738 652.6310 <2e-16 *** #> mod         1  40936174  40936174  88.2481 <2e-16 *** #> cov1        1    341505    341505   0.7362 0.3913     #> cat1        2   1118110    559055   1.2052 0.3005     #> iv:mod      1    946107    946107   2.0396 0.1539     #> Residuals 493 228690783    463876                     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1"},{"path":"https://sfcheung.github.io/betaselectr/reference/coef.lm_betaselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Coefficients of an 'lm_betaselect'-Class Object — coef.lm_betaselect","title":"Coefficients of an 'lm_betaselect'-Class Object — coef.lm_betaselect","text":"Return estimates coefficients lm_betaselect-class object.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/coef.lm_betaselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coefficients of an 'lm_betaselect'-Class Object — coef.lm_betaselect","text":"","code":"# S3 method for lm_betaselect coef(   object,   complete = FALSE,   type = c(\"beta\", \"standardized\", \"raw\", \"unstandardized\"),   ... )"},{"path":"https://sfcheung.github.io/betaselectr/reference/coef.lm_betaselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coefficients of an 'lm_betaselect'-Class Object — coef.lm_betaselect","text":"object output lm_betaselect(), lm_betaselect-class object. complete TRUE, returns full vector coefficients, including terms dropped -determined system. See stats::coef() information. Default FALSE. type String. \"unstandardized\" \"raw\", coefficients standardization returned. \"beta\" \"standardized\", coefficients selected variables standardized returned. Default \"beta\". ... arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/coef.lm_betaselect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coefficients of an 'lm_betaselect'-Class Object — coef.lm_betaselect","text":"scalar vector: estimate regression coefficients.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/coef.lm_betaselect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coefficients of an 'lm_betaselect'-Class Object — coef.lm_betaselect","text":"default, extracts regression coefficients selected variables standardized. requested, can also return regression coefficients without standardization.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/betaselectr/reference/coef.lm_betaselect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Coefficients of an 'lm_betaselect'-Class Object — coef.lm_betaselect","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/coef.lm_betaselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coefficients of an 'lm_betaselect'-Class Object — coef.lm_betaselect","text":"","code":"data(data_test_mod_cat)  lm_beta_x <- lm_betaselect(dv ~ iv*mod + cov1 + cat1,                            data = data_test_mod_cat,                            to_standardize = \"iv\") coef(lm_beta_x) #> (Intercept)          iv         mod        cov1     cat1gp2     cat1gp3  #>  790.549933  -94.301982   57.578053   10.024281 -112.587966  -53.106405  #>      iv:mod  #>    8.661027  coef(lm_beta_x, type = \"raw\") #> (Intercept)          iv         mod        cov1     cat1gp2     cat1gp3  #> 1488.568116  -46.545177   -6.530403   10.024281 -112.587966  -53.106405  #>      iv:mod  #>    4.274873"},{"path":"https://sfcheung.github.io/betaselectr/reference/confint.lm_betaselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Interval for an 'lm_betaselect'-Class Object — confint.lm_betaselect","title":"Confidence Interval for an 'lm_betaselect'-Class Object — confint.lm_betaselect","text":"Return confidence interval regression coefficients output lm_betaselect().","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/confint.lm_betaselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Interval for an 'lm_betaselect'-Class Object — confint.lm_betaselect","text":"","code":"# S3 method for lm_betaselect confint(   object,   parm,   level = 0.95,   method = c(\"boot\", \"bootstrap\", \"ls\"),   type = c(\"beta\", \"standardized\", \"raw\", \"unstandardized\"),   warn = TRUE,   boot_type = c(\"perc\", \"bc\"),   ... )"},{"path":"https://sfcheung.github.io/betaselectr/reference/confint.lm_betaselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Interval for an 'lm_betaselect'-Class Object — confint.lm_betaselect","text":"object output lm_betaselect(). parm terms confidence intervals returned. missing, confidence intervals terms returned. level level confidence, default .95, returning 95% confidence interval. method method used compute confidence intervals/ bootstrapping requested calling lm_betaselect() argument set \"bootstrap\" \"boot\", bootstrap confidence intervals returned. bootstrapping requested argument set \"ls\", usual lm confidence intervals returned, warning raised unless type \"raw\" \"unstandardized\". Default \"boot\". type String. \"unstandardized\" \"raw\", confidence intervals coefficients standardization returned. \"beta\" \"standardized\", confidence intervals coefficients selected variables standardized returned. Default \"beta\". warn Logical. Whether warning raised OLS (WLS) confidence intervals requested model variables standardized (.e., type \"beta\" \"standardized\"). Default TRUE. boot_type type bootstrap confidence intervals. Currently, supports \"perc\", percentile bootstrap confidence intervals, \"bc\", bias-corrected bootstrap confidence interval. ... Optional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/confint.lm_betaselect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Interval for an 'lm_betaselect'-Class Object — confint.lm_betaselect","text":"p 2 matrix confidence intervals, p number coefficients.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/confint.lm_betaselect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Confidence Interval for an 'lm_betaselect'-Class Object — confint.lm_betaselect","text":"type confidence intervals depends object. bootstrapping requested, default returns percentile bootstrap confidence intervals. Otherwise, returns OLS (WLS) confidence intervals raises warning standardized solution. Support type confidence intervals added.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/betaselectr/reference/confint.lm_betaselect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Confidence Interval for an 'lm_betaselect'-Class Object — confint.lm_betaselect","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/confint.lm_betaselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Interval for an 'lm_betaselect'-Class Object — confint.lm_betaselect","text":"","code":"data(data_test_mod_cat)  # bootstrap should be set to 2000 or 5000 in real studies lm_beta_x <- lm_betaselect(dv ~ iv*mod + cov1 + cat1,                            data = data_test_mod_cat,                            to_standardize = \"iv\",                            do_boot = TRUE,                            bootstrap = 100,                            iseed = 1234) confint(lm_beta_x) #>                    2.50%     97.50% #> (Intercept)  -430.111608 1905.57231 #> iv          -1569.880043  981.85133 #> mod            45.591866   70.39718 #> cov1           -5.932809   35.46045 #> cat1gp2      -263.296976   32.21821 #> cat1gp3      -209.176316   88.39063 #> iv:mod         -1.968484   22.60068 confint(lm_beta_x, method = \"ls\") #> Warning: With standardization, the variance-covariance matrix using OLS or WLS should not be used. #>                    2.5 %     97.5 % #> (Intercept)  -427.704232 2008.80410 #> iv          -1288.701874 1100.09791 #> mod            45.577790   69.57831 #> cov1           -9.964016   30.01258 #> cat1gp2      -262.002717   36.82678 #> cat1gp3      -200.713438   94.50063 #> iv:mod         -3.254568   20.57662 confint(lm_beta_x, type = \"raw\") #>                     2.50%      97.50% #> (Intercept) -6589.9670647 12784.45818 #> iv           -819.0639644   480.69905 #> mod          -117.7931940    72.26797 #> cov1           -5.9328088    35.46045 #> cat1gp2      -263.2969756    32.21821 #> cat1gp3      -209.1763158    88.39063 #> iv:mod         -0.9629292    11.79166"},{"path":"https://sfcheung.github.io/betaselectr/reference/data_test_medmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Dataset with Moderator and Mediator — data_test_medmod","title":"Test Dataset with Moderator and Mediator — data_test_medmod","text":"dataset one mediator, one moderator, one independent variable, one dependent variable, two control variables.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/data_test_medmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Dataset with Moderator and Mediator — data_test_medmod","text":"","code":"data_test_medmod"},{"path":"https://sfcheung.github.io/betaselectr/reference/data_test_medmod.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Test Dataset with Moderator and Mediator — data_test_medmod","text":"data frame 200 rows five variables: dv Dependent variable, continuous iv Independent variable, continuous mod Moderator, continuous med Mediator, continuous cov1 Control variable, continuous cov2 Control variable, continuous","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/data_test_medmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Dataset with Moderator and Mediator — data_test_medmod","text":"","code":"library(lavaan) #> This is lavaan 0.6-18 #> lavaan is FREE software! Please report any bugs. mod <- \" med ~ iv + mod + iv:mod + cov1 + cov2 dv ~ med + iv + cov1 + cov2 \" fit <- sem(mod,            data_test_medmod) summary(fit) #> lavaan 0.6-18 ended normally after 2 iterations #>  #>   Estimator                                         ML #>   Optimization method                           NLMINB #>   Number of model parameters                        11 #>  #>   Number of observations                           200 #>  #> Model Test User Model: #>                                                        #>   Test statistic                                 2.303 #>   Degrees of freedom                                 2 #>   P-value (Chi-square)                           0.316 #>  #> Parameter Estimates: #>  #>   Standard errors                             Standard #>   Information                                 Expected #>   Information saturated (h1) model          Structured #>  #> Regressions: #>                    Estimate   Std.Err  z-value  P(>|z|) #>   med ~                                                 #>     iv                -6.373    0.985   -6.473    0.000 #>     mod               -3.899    0.614   -6.346    0.000 #>     iv:mod             0.286    0.039    7.340    0.000 #>     cov1              -0.093    0.070   -1.327    0.185 #>     cov2               0.242    0.133    1.823    0.068 #>   dv ~                                                  #>     med                0.092    0.011    8.098    0.000 #>     iv                 0.227    0.038    5.896    0.000 #>     cov1              -0.006    0.013   -0.454    0.650 #>     cov2               0.030    0.025    1.230    0.219 #>  #> Variances: #>                    Estimate   Std.Err  z-value  P(>|z|) #>    .med               60.292    6.029   10.000    0.000 #>    .dv                 2.087    0.209   10.000    0.000 #>"},{"path":"https://sfcheung.github.io/betaselectr/reference/data_test_mod_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Dataset with Moderator and Categorical Variables — data_test_mod_cat","title":"Test Dataset with Moderator and Categorical Variables — data_test_mod_cat","text":"dataset one predictor, one moderator, one control variable, one dependent variable, categorical variable.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/data_test_mod_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Dataset with Moderator and Categorical Variables — data_test_mod_cat","text":"","code":"data_test_mod_cat"},{"path":"https://sfcheung.github.io/betaselectr/reference/data_test_mod_cat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Test Dataset with Moderator and Categorical Variables — data_test_mod_cat","text":"data frame 500 rows five variables: dv Dependent variable, continuous iv Independent variable, continuous mod Moderator, continuous cov1 Control variable, continuous cat1 String variable values: \"gp1\", \"gp2\", \"gp3\"","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/data_test_mod_cat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Dataset with Moderator and Categorical Variables — data_test_mod_cat","text":"","code":"lm_out <- lm(dv ~ iv * mod + cov1 + cat1, data_test_mod_cat) summary(lm_out) #>  #> Call: #> lm(formula = dv ~ iv * mod + cov1 + cat1, data = data_test_mod_cat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1987.03  -463.99     0.25   455.14  2152.48  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|) #> (Intercept) 1488.568   4540.789   0.328    0.743 #> iv           -46.545    300.046  -0.155    0.877 #> mod           -6.530     45.372  -0.144    0.886 #> cov1          10.024     10.173   0.985    0.325 #> cat1gp2     -112.588     76.046  -1.481    0.139 #> cat1gp3      -53.106     75.126  -0.707    0.480 #> iv:mod         4.275      2.993   1.428    0.154 #>  #> Residual standard error: 681.1 on 493 degrees of freedom #> Multiple R-squared:  0.6021,\tAdjusted R-squared:  0.5973  #> F-statistic: 124.3 on 6 and 493 DF,  p-value: < 2.2e-16 #>"},{"path":"https://sfcheung.github.io/betaselectr/reference/getCall.lm_betaselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the Call From an 'lm_betaselect' Object — getCall.lm_betaselect","title":"Extract the Call From an 'lm_betaselect' Object — getCall.lm_betaselect","text":"getCall-method lm_betaselect-class objects.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/getCall.lm_betaselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the Call From an 'lm_betaselect' Object — getCall.lm_betaselect","text":"","code":"# S3 method for lm_betaselect getCall(   x,   what = c(\"lm_betaselect\", \"beta\", \"standardized\", \"raw\", \"unstandardized\"),   ... )"},{"path":"https://sfcheung.github.io/betaselectr/reference/getCall.lm_betaselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the Call From an 'lm_betaselect' Object — getCall.lm_betaselect","text":"x lm_betaselect-class object call extracted. call extract. \"lm_betaselect\", call lm_betaselect() extracted. \"beta\" \"standardized\", call used fit model selected variables standardized extracted. \"raw\" \"unstandardized\", call used fit hte model standardization extracted. ... Additional arguments. Ignored.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/getCall.lm_betaselect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the Call From an 'lm_betaselect' Object — getCall.lm_betaselect","text":"returns call requested.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/getCall.lm_betaselect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the Call From an 'lm_betaselect' Object — getCall.lm_betaselect","text":"works way default getCall-method output stats::lm().","code":""},{"path":[]},{"path":"https://sfcheung.github.io/betaselectr/reference/getCall.lm_betaselect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract the Call From an 'lm_betaselect' Object — getCall.lm_betaselect","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/getCall.lm_betaselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the Call From an 'lm_betaselect' Object — getCall.lm_betaselect","text":"","code":"data(data_test_mod_cat)  lm_beta_x <- lm_betaselect(dv ~ iv*mod + cov1,                            data = data_test_mod_cat,                            to_standardize = \"iv\") getCall(lm_beta_x) #> betaselectr::lm_betaselect(formula = dv ~ iv * mod + cov1, data = data_test_mod_cat,  #>     to_standardize = \"iv\") getCall(lm_beta_x, what = \"beta\") #> stats::lm(formula = dv ~ iv * mod + cov1, data = betaselectr::std_data(data = data_test_mod_cat,  #>     to_standardize = \"iv\")) getCall(lm_beta_x, what = \"raw\") #> stats::lm(formula = dv ~ iv * mod + cov1, data = data_test_mod_cat)"},{"path":"https://sfcheung.github.io/betaselectr/reference/lav_betaselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize Coefficients in a 'lavaan'-Model — lav_betaselect","title":"Standardize Coefficients in a 'lavaan'-Model — lav_betaselect","text":"Can standardize selected variables lavaan model without refitting models, can handle product term correctly skip categorical predictors standardization.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/lav_betaselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize Coefficients in a 'lavaan'-Model — lav_betaselect","text":"","code":"lav_betaselect(   object,   to_standardize = \".all.\",   not_to_standardize = NULL,   skip_categorical_x = TRUE,   output = c(\"data.frame\", \"text\"),   std_se = c(\"none\", \"delta\", \"bootstrap\"),   std_z = TRUE,   std_pvalue = TRUE,   std_ci = TRUE,   level = 0.95,   progress = TRUE,   boot_out = NULL,   bootstrap = 100L,   store_boot_est = TRUE,   parallel = c(\"no\", \"snow\", \"multicore\"),   ncpus = parallel::detectCores(logical = FALSE) - 1,   cl = NULL,   iseed = NULL,   ...,   delta_method = c(\"lavaan\", \"numDeriv\"),   vector_form = TRUE,   find_product_terms = TRUE )"},{"path":"https://sfcheung.github.io/betaselectr/reference/lav_betaselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize Coefficients in a 'lavaan'-Model — lav_betaselect","text":"object output lavaan model fit functions, lavaan::sem() lavaan::cfa(). to_standardize string vector, names variables standardized. Default \".\", indicating variables standardized (see skip_categorical). not_to_standardize string vector, names variables standardized. argument useful variables, except , standardized. argument ued to_standardize time. Default NULL, to_standardize used. skip_categorical_x Logical. TRUE, default, categorical predictors, defined variables two possible values data analyzed, skipped standardization. overrides argument to_standardize. , categorical predictor standardized even listed to_standardize, unless uses set argument FALSE. output format output. set \"data.frame\", output data frame like one lavaan::parameterEstimates(). set \"text\", printed format similar one summary-method lavaan. (NOTE: \"text\" supported fully implemented.) std_se String. set \"none\", default, standard errors computed standardized solution. set \"delta\", delta method used compute standard errors. set \"bootstrap\", depends whether boot_out set. boot_out output manymome::do_boot(), content used. boot_out NULL bootstrap estimates available object (e.g., bootstrapping requested fitting model lavaan), stored bootstrap estimates sued. available, bootstrapping conducted using lavaan::bootstrapLavaan(), using arguments bootstrap, parallel, ncpus, cl, iseed.` std_z Logical. TRUE std_se set \"none\", standard error computed using method specified std_se. Default TRUE. std_pvalue Logical. TRUE, std_se set \"none\", std_z TRUE, p-values computed using method specified std_se. bootstrapping, method proposed Asparouhov Muthén (2021) used. Default TRUE. std_ci Logical. TRUE std_se set \"none\", confidence intervals computed using method specified std_se. Default FALSE. level level confidence confidence intervals. Default .95. used confidence intervals unstandardized standardized solution. progress Logical. TRUE, progress bars displayed long process. boot_out std_se \"bootstrap\" argument set output manymome::do_boot(), output used computing statistics standard errors confidence intervals. allows users use methods bootstrapping fitting model, can still request bootstrapping standardized solution. bootstrap std_se \"bootstrap\" bootstrapping requested fitting model boot_out set, lavaan::bootstrapLavaan() called bootstrapping. argument number bootstrap samples draw. Default 100. set 5000 even 10000 stable results. store_boot_est Logical. std_se \"bootstrap\" argument TRUE, default, bootstrap estimates standardized solution stored attribute \"boot_est\". estimates can used diagnosis bootstrapping. FALSE, bootstrap estimates stored. parallel std_se \"bootstrap\" bootstrapping requested fitting model boot_out set, lavaan::bootstrapLavaan() called bootstrapping. argument passed lavaan::bootstrapLavaan(). Default \"\". ncpus std_se \"bootstrap\" bootstrapping requested fitting model boot_out set, lavaan::bootstrapLavaan() called bootstrapping. argument passed lavaan::bootstrapLavaan(). Default parallel::detectCores(logical = FALSE) - 1. Ignored parallel \"\". cl std_se \"bootstrap\" bootstrapping requested fitting model boot_out set, lavaan::bootstrapLavaan() called bootstrapping. argument passed lavaan::bootstrapLavaan(). Default NULL. Ignored parallel \"\". iseed std_se \"bootstrap\" bootstrapping requested fitting model boot_out set, lavaan::bootstrapLavaan() called bootstrapping. argument passed lavaan::bootstrapLavaan() set seed random resampling. Default NULL. set integer reproducible results. Ignored parallel \"\". ... Optional arguments passed lavaan::parameterEstimates(), use generate output. delta_method method used compute delta method standard errors. internal use changed. vector_form internal method used compute standardized solution. internal use changed. find_product_terms String. certain model product terms, setting FALSE skip search, time consuming models many paths /many variables. Default TRUE, function automatically identify product terms, .","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/lav_betaselect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize Coefficients in a 'lavaan'-Model — lav_betaselect","text":"data frame storing parameter estimates, similar form output lavaan::parameterEstimates().","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/lav_betaselect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardize Coefficients in a 'lavaan'-Model — lav_betaselect","text":"function lets users select variables standardized computing standardized solution. following features: automatically skips predictors two unique values, assuming dummy variables. standardize product term, incorrect. Instead, compute product term component variables standardized. can used generate bootstrap confidence intervals standardized solution. Bootstrap confidence interval better standardization fitting model correctly takes account sampling variance standard deviations. also better delta method confidence interval takes account usually asymmetric distribution parameters standardization. comparison, can also report delta method standard errors confidence intervals.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/lav_betaselect.html","id":"problems-with-common-approaches","dir":"Reference","previous_headings":"","what":"Problems With Common Approaches","title":"Standardize Coefficients in a 'lavaan'-Model — lav_betaselect","text":"SEM programs, users limited control variables standardize requesting standardized solution. solution may uninterpretable misleading conditions: Dummy variables standardized can interpreted difference two groups outcome variables. Product terms (interaction terms) standardized interpreted changes effects focal variables moderators change (Cheung, Cheung, Lau, Hui, & Vong, 2022). Variables meaningful units can difficult interpret standardized (e.g., age). Moreover, delta method usually used, suboptimal standardization unless sample size large. example, covariance variables standardized correlation, sampling distribution skewed unless population value zero. However, delta method confidence interval correlation necessarily symmetric around point estimate.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/lav_betaselect.html","id":"limitations","dir":"Reference","previous_headings":"","what":"Limitations","title":"Standardize Coefficients in a 'lavaan'-Model — lav_betaselect","text":"supports observed variable interaction terms, support two-way interactions. support multilevel models. supports models fitted raw data. Intercepts supported.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/lav_betaselect.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardize Coefficients in a 'lavaan'-Model — lav_betaselect","text":"Asparouhov, ., & Muthén, B. (2021). Bootstrap p-value computation. Retrieved https://www.statmodel.com/download/FAQ-Bootstrap%20-%20Pvalue.pdf Cheung, S. F., Cheung, S.-H., Lau, E. Y. Y., Hui, C. H., & Vong, W. N. (2022) Improving old way measure moderation effect standardized units. Health Psychology, 41(7), 502-505. doi:10.1037/hea0001188","code":""},{"path":[]},{"path":"https://sfcheung.github.io/betaselectr/reference/lav_betaselect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardize Coefficients in a 'lavaan'-Model — lav_betaselect","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/lav_betaselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize Coefficients in a 'lavaan'-Model — lav_betaselect","text":"","code":"# \\donttest{ # TO ADD # }"},{"path":"https://sfcheung.github.io/betaselectr/reference/lm_betaselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize Coefficients in a Regression Model — lm_betaselect","title":"Standardize Coefficients in a Regression Model — lm_betaselect","text":"Can fit linear regression models selected variables standardized; handle product terms correctly skip categorical predictors standardization.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/lm_betaselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize Coefficients in a Regression Model — lm_betaselect","text":"","code":"lm_betaselect(   ...,   to_standardize = NULL,   not_to_standardize = NULL,   do_boot = TRUE,   bootstrap = 100L,   iseed = NULL,   parallel = FALSE,   ncpus = parallel::detectCores(logical = FALSE) - 1,   progress = TRUE,   load_balancing = TRUE )  # S3 method for lm_betaselect print(   x,   digits = max(3L, getOption(\"digits\") - 3L),   type = c(\"beta\", \"standardized\", \"raw\", \"unstandardized\"),   ... )  raw_output(x)"},{"path":"https://sfcheung.github.io/betaselectr/reference/lm_betaselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize Coefficients in a Regression Model — lm_betaselect","text":"... lm_betaselect(), arguments passed directly lm(). print-method lm_betaselect objects, passed methods. to_standardize string vector, names variables standardized. Default NULL, indicating variables standardized (see skip_categorical). not_to_standardize string vector, names variables standardized. argument useful variables, except , standardized. argument ued to_standardize time. Default NULL, to_standardize used. do_boot Whether bootstrapping conducted. Default TRUE. bootstrap do_boot TRUE, argument number bootstrap samples draw. Default 100. set 5000 even 10000 stable results. iseed do_boot TRUE argument NULL, used set.seed() set seed random number generator. Default NULL. parallel do_boot TRUE argument TRUE, parallel processing used bootstrapping. Default FALSE bootstrapping regression lm() rarely slow. ncpus do_boot TRUE parallel also TRUE, argument number processes used parallel processing. Default parallel::detectCores(logical = FALSE) - 1 progress Logical. TRUE, progress bars displayed long process. load_balancing Logical. parallel TRUE, determine whether load balancing used. Default TRUE. x lm_betaselect-class object. digits number significant digits printed coefficients. type coefficients printed. \"beta\" \"standardized\", coefficients selected variables standardized printed. \"raw\" \"unstandardized\", coefficients standardization done printed.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/lm_betaselect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize Coefficients in a Regression Model — lm_betaselect","text":"function lm_betaselect() returns object class lm_betaselect, similar output lm(), additional information stored. function raw_output() returns object class lm, results fitting model data stats::lm() without standardization.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/lm_betaselect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardize Coefficients in a Regression Model — lm_betaselect","text":"function lm_betaselect() lets users select variables standardized computing standardized solution. following features: automatically skips categorical predictors (.e., factor string variables). standardize product term, incorrect. Instead, compute product term component variables standardized. standardizes selected variables fitting model. Therefore, model term log(x) x one selected variables, model used logarithm standardized x model, instead standardized log(x) difficult interpret. can used generate nonparametric bootstrap confidence intervals standardized solution. Bootstrap confidence interval better least square confidence interval ignoring standardization takes account sampling variance standard deviations. one recommended methods forming confidence intervals coefficients involving standardized variables (Jones & Waller, 2013). function raw_output() simply extracts regression output stats::lm() variables without standardization.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/lm_betaselect.html","id":"problems-with-common-approaches","dir":"Reference","previous_headings":"","what":"Problems With Common Approaches","title":"Standardize Coefficients in a Regression Model — lm_betaselect","text":"regression programs, users limited control variables standardize requesting -called \"betas\". solution may uninterpretable misleading conditions: Dummy variables standardized interpreted difference two groups outcome variables. Product terms (interaction terms) standardized interpreted changes effects focal variables moderators change (Cheung, Cheung, Lau, Hui, & Vong, 2022). Variables meaningful units can difficult interpret standardized (e.g., age).","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/lm_betaselect.html","id":"how-it-works","dir":"Reference","previous_headings":"","what":"How It Works","title":"Standardize Coefficients in a Regression Model — lm_betaselect","text":"standardizes original variables used regression model. Therefore, strictly speaking, standardize predictors regression model, standardize input variable (Gelman et al., 2021). requested model fitted dataset selected variables standardized. ease follow-analysis, results selected variables standardized results without standardization stored. required, results without standardization can retrieved raw_output().","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/lm_betaselect.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Standardize Coefficients in a Regression Model — lm_betaselect","text":"output lm_betaselect() lm_betaselect-class object. following methods:add coef-method extracting coefficients model. (See coef.lm_betaselect() details.) vcov-method extracting variance-covariance matrix estimates coefficients. bootstrapping requested, can return matrix based bootstrapping estimates. (See vcov.lm_betaselect() details.) confint-method forming confidence intervals estimates coefficients. bootstrapping requested, can return bootstrap confidence intervals. (See confint.lm_betaselect() details.) summary-method printing summary results, additional information number bootstrap samples variables standardized. (See summary.lm_betaselect() details.) anova-method printing ANOVA table. Can also used compare two outputs lm_betaselect(). (See anova.lm_betaselect() details.) predict-method computing predicted values. can used compute predicted values given set new unstandardized data. data standardized computing predicted values models standardization. (See predict.lm_betaselect() details.) default update-method updating call also works lm_betaselect object. can update model way updates model fitted stats::lm(), also update arguments lm_betaselect(), variables standardized. (See stats::update() details.) methods output stats::lm() also work lm_betaselect-class object. give results regardless variables standardized. example, rstandard() cooks.distance(). others, used cautions make use variance-covariance matrix estimates may use least square version. use methods lm objects results without standardization, simply use raw_output(). example, get fitted values without standardization, call fitted(raw_output(x)), x output lm_betaselect().","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/lm_betaselect.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Standardize Coefficients in a Regression Model — lm_betaselect","text":"Cheung, S. F., Cheung, S.-H., Lau, E. Y. Y., Hui, C. H., & Vong, W. N. (2022) Improving old way measure moderation effect standardized units. Health Psychology, 41(7), 502-505. doi:10.1037/hea0001188 Craig, C. C. (1936). frequency function xy. Annals Mathematical Statistics, 7(1), 1--15. doi:10.1214/aoms/1177732541 Gelman, ., Hill, J., & Vehtari, . (2021). Regression stories. Cambridge University Press. doi:10.1017/9781139161879 Jones, J. ., & Waller, N. G. (2013). Computing confidence intervals standardized regression coefficients. Psychological Methods, 18(4), 435--453. doi:10.1037/a0033269","code":""},{"path":[]},{"path":"https://sfcheung.github.io/betaselectr/reference/lm_betaselect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardize Coefficients in a Regression Model — lm_betaselect","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/lm_betaselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize Coefficients in a Regression Model — lm_betaselect","text":"","code":"data(data_test_mod_cat)  # Standardize only iv  lm_beta_x <- lm_betaselect(dv ~ iv*mod + cov1 + cat1,                            data = data_test_mod_cat,                            to_standardize = \"iv\") lm_beta_x #>  #> Call to lm_betaselect(): #> betaselectr::lm_betaselect(formula = dv ~ iv * mod + cov1 + cat1,  #>     data = data_test_mod_cat, to_standardize = \"iv\") #>  #> Variable(s) standardized: iv #>  #> Model *after* standardization: #>  #> Call: #> stats::lm(formula = dv ~ iv * mod + cov1 + cat1, data = betaselectr::std_data(data = data_test_mod_cat,  #>     to_standardize = \"iv\")) #>  #> Coefficients: #> (Intercept)           iv          mod         cov1      cat1gp2      cat1gp3   #>     790.550      -94.302       57.578       10.024     -112.588      -53.106   #>      iv:mod   #>       8.661   #>  summary(lm_beta_x) #> Call to lm_betaselect(): #> betaselectr::lm_betaselect(formula = dv ~ iv * mod + cov1 + cat1,  #>     data = data_test_mod_cat, to_standardize = \"iv\") #>  #> Variable(s) standardized: iv  #>  #> Call: #> stats::lm(formula = dv ~ iv * mod + cov1 + cat1, data = betaselectr::std_data(data = data_test_mod_cat,  #>     to_standardize = \"iv\")) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1987.03  -463.99     0.25   455.14  2152.48  #>  #> Coefficients: #>             Estimate Std. Error z value Pr(Boot)     #> (Intercept)  790.550    628.105   1.259     0.16     #> iv           -94.302    721.336  -0.131     0.22     #> mod           57.578      6.133   9.388     0.54     #> cov1          10.024     10.126   0.990     0.34     #> cat1gp2     -112.588     76.889  -1.464     0.82     #> cat1gp3      -53.106     77.879  -0.682     0.26     #> iv:mod         8.661      7.200   1.203   <0.001 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 681.1 on 493 degrees of freedom #>  #> R-squared                : 0.602 #> Adjusted R-squared       : 0.597 #> ANOVA test of R-squared : F(6, 493) = 124.344, p < 0.001 #>  #> Note: #> - Results *after* standardization are reported. #> - Nonparametric bootstrapping conducted. #> - The number of bootstrap samples is 100. #> - Standard errors are bootstrap standard errors. #> - Z values are computed by 'Estimate / Std. Error'. #> - The bootstrap p-values are asymmetric p-values by Asparouhov and #>   Muthén (2021).  # Manually standardize iv and call lm()  data_test_mod_cat$iv_z <- scale(data_test_mod_cat[, \"iv\"])[, 1]  lm_beta_x_manual <- lm(dv ~ iv_z*mod + cov1 + cat1,                        data = data_test_mod_cat)  coef(lm_beta_x) #> (Intercept)          iv         mod        cov1     cat1gp2     cat1gp3  #>  790.549933  -94.301982   57.578053   10.024281 -112.587966  -53.106405  #>      iv:mod  #>    8.661027  coef(lm_beta_x_manual) #> (Intercept)        iv_z         mod        cov1     cat1gp2     cat1gp3  #>  790.549933  -94.301982   57.578053   10.024281 -112.587966  -53.106405  #>    iv_z:mod  #>    8.661027   # Standardize all numeric variables  lm_beta_all <- lm_betaselect(dv ~ iv*mod + cov1 + cat1,                              data = data_test_mod_cat) # Note that cat1 is not standardized summary(lm_beta_all) #> Call to lm_betaselect(): #> betaselectr::lm_betaselect(formula = dv ~ iv * mod + cov1 + cat1,  #>     data = data_test_mod_cat) #>  #> Variable(s) standardized: dv, iv, mod, cov1, iv_z  #>  #> Call: #> stats::lm(formula = dv ~ iv * mod + cov1 + cat1, data = betaselectr::std_data(data = data_test_mod_cat,  #>     to_standardize = c(\"dv\", \"iv\", \"mod\", \"cov1\", \"iv_z\"))) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1.85143 -0.43232  0.00024  0.42408  2.00559  #>  #> Coefficients: #>             Estimate Std. Error z value Pr(Boot)     #> (Intercept)    0.051      0.042   1.217     0.22     #> iv             0.720      0.022  32.675     0.12     #> mod            0.269      0.025  10.584     0.38     #> cov1           0.028      0.025   1.105     0.28     #> cat1gp2       -0.105      0.075  -1.393   <0.001 *** #> cat1gp3       -0.049      0.065  -0.759     0.16     #> iv:mod         0.040      0.030   1.366   <0.001 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.6346 on 493 degrees of freedom #>  #> R-squared                : 0.602 #> Adjusted R-squared       : 0.597 #> ANOVA test of R-squared : F(6, 493) = 124.344, p < 0.001 #>  #> Note: #> - Results *after* standardization are reported. #> - Nonparametric bootstrapping conducted. #> - The number of bootstrap samples is 100. #> - Standard errors are bootstrap standard errors. #> - Z values are computed by 'Estimate / Std. Error'. #> - The bootstrap p-values are asymmetric p-values by Asparouhov and #>   Muthén (2021).   summary(raw_output(lm_beta_x)) #>  #> Call: #> stats::lm(formula = dv ~ iv * mod + cov1 + cat1, data = data_test_mod_cat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1987.03  -463.99     0.25   455.14  2152.48  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|) #> (Intercept) 1488.568   4540.789   0.328    0.743 #> iv           -46.545    300.046  -0.155    0.877 #> mod           -6.530     45.372  -0.144    0.886 #> cov1          10.024     10.173   0.985    0.325 #> cat1gp2     -112.588     76.046  -1.481    0.139 #> cat1gp3      -53.106     75.126  -0.707    0.480 #> iv:mod         4.275      2.993   1.428    0.154 #>  #> Residual standard error: 681.1 on 493 degrees of freedom #> Multiple R-squared:  0.6021,\tAdjusted R-squared:  0.5973  #> F-statistic: 124.3 on 6 and 493 DF,  p-value: < 2.2e-16 #>"},{"path":"https://sfcheung.github.io/betaselectr/reference/predict.lm_betaselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Method for an 'lm_betaselect' Object — predict.lm_betaselect","title":"Predict Method for an 'lm_betaselect' Object — predict.lm_betaselect","text":"Compute predicted values model fitted lm_betaselect().","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/predict.lm_betaselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Method for an 'lm_betaselect' Object — predict.lm_betaselect","text":"","code":"# S3 method for lm_betaselect predict(   object,   model_type = c(\"beta\", \"standardized\", \"raw\", \"unstandardized\"),   newdata,   ... )"},{"path":"https://sfcheung.github.io/betaselectr/reference/predict.lm_betaselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Method for an 'lm_betaselect' Object — predict.lm_betaselect","text":"object lm_betaselect-class object. model_type model predicted values computed. \"beta\" \"standardized\", model one selected variables standardized. \"raw\" \"unstandardized\", model one standardization done. newdata set data frame, predicted values computed using data frame. data must unstandardized. , variables units data frame used lm_betaselect(). model_type \"beta\" \"standardized\", standardized using setting to_standardize object created lm_betaselect(). ... Arguments passed stats::predict.lm(). Please refer help page stats::predict.lm().","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/predict.lm_betaselect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Method for an 'lm_betaselect' Object — predict.lm_betaselect","text":"returns output stats::predict.lm().","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/predict.lm_betaselect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict Method for an 'lm_betaselect' Object — predict.lm_betaselect","text":"simply passes model selected variables standardized predict-method lm object.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/predict.lm_betaselect.html","id":"important","dir":"Reference","previous_headings":"","what":"IMPORTANT","title":"Predict Method for an 'lm_betaselect' Object — predict.lm_betaselect","text":"statistics, prediction confidence interval, make use sampling variances covariances coefficient estimates may applicable models one variables standardized. Therefore, used exploratory purpose.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/betaselectr/reference/predict.lm_betaselect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Predict Method for an 'lm_betaselect' Object — predict.lm_betaselect","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/predict.lm_betaselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Method for an 'lm_betaselect' Object — predict.lm_betaselect","text":"","code":"data(data_test_mod_cat)  lm_beta_x <- lm_betaselect(dv ~ iv*mod + cov1 + cat1,                            data = data_test_mod_cat,                            to_standardize = \"iv\") predict(lm_beta_x) #>        1        2        3        4        5        6        7        8  #> 6421.680 6530.429 6487.252 6107.743 6284.481 5153.358 6662.658 7827.410  #>        9       10       11       12       13       14       15       16  #> 7029.198 8156.635 6019.411 5574.344 6180.277 7010.803 4963.590 6059.476  #>       17       18       19       20       21       22       23       24  #> 7239.020 6698.976 6764.336 5353.118 7577.253 7719.758 6576.826 8237.401  #>       25       26       27       28       29       30       31       32  #> 8200.935 7931.369 6569.994 6882.033 8267.304 7128.476 5959.531 6920.342  #>       33       34       35       36       37       38       39       40  #> 5887.038 6007.579 5586.136 6880.800 5452.636 7665.795 6564.230 6089.381  #>       41       42       43       44       45       46       47       48  #> 7046.119 5101.476 6404.048 6188.349 6429.859 7628.757 7847.636 6881.857  #>       49       50       51       52       53       54       55       56  #> 6592.794 7275.835 6087.745 6132.776 6378.544 6454.268 5449.982 7631.170  #>       57       58       59       60       61       62       63       64  #> 6713.771 6819.890 7710.031 6261.576 5468.773 5283.316 6904.287 5694.848  #>       65       66       67       68       69       70       71       72  #> 5338.961 7166.193 6417.537 6584.919 5788.587 7106.867 6478.441 4945.244  #>       73       74       75       76       77       78       79       80  #> 4720.702 5969.793 6776.512 6825.743 6467.491 5401.580 5291.916 6058.456  #>       81       82       83       84       85       86       87       88  #> 5960.974 5662.433 7254.471 7000.237 7692.378 5039.460 6057.840 6331.362  #>       89       90       91       92       93       94       95       96  #> 6532.205 5538.184 5749.854 7334.872 6434.210 6442.079 5618.349 7410.285  #>       97       98       99      100      101      102      103      104  #> 5891.992 6688.047 7174.997 5234.916 5729.762 7843.111 6855.171 6811.118  #>      105      106      107      108      109      110      111      112  #> 5805.968 6535.212 5729.227 6194.901 5697.342 7666.604 6222.894 6451.290  #>      113      114      115      116      117      118      119      120  #> 7328.785 7098.303 6081.005 6725.354 6567.422 6935.756 6410.174 7128.479  #>      121      122      123      124      125      126      127      128  #> 6715.371 6660.228 5197.764 6106.589 7344.590 7526.230 6279.533 5559.357  #>      129      130      131      132      133      134      135      136  #> 7033.286 6542.692 7144.951 7685.140 6446.983 6501.323 7291.124 6796.924  #>      137      138      139      140      141      142      143      144  #> 7385.154 8119.350 5659.128 5534.587 7661.700 7252.737 5721.102 5441.864  #>      145      146      147      148      149      150      151      152  #> 6767.296 5303.049 7127.611 5868.182 6265.856 7428.265 5928.060 6519.315  #>      153      154      155      156      157      158      159      160  #> 6212.102 6619.222 6161.753 6646.573 6267.180 5697.635 7634.741 7476.451  #>      161      162      163      164      165      166      167      168  #> 6368.692 7718.742 6548.494 7614.872 7199.461 6022.501 6292.890 7695.434  #>      169      170      171      172      173      174      175      176  #> 7391.428 6960.239 6813.179 7781.359 6785.648 7620.418 6547.261 6510.296  #>      177      178      179      180      181      182      183      184  #> 6435.727 6062.403 7265.656 5537.013 5569.140 5759.934 5044.076 7994.875  #>      185      186      187      188      189      190      191      192  #> 5238.464 7685.679 6051.276 4877.087 6937.267 7232.846 6657.324 5865.098  #>      193      194      195      196      197      198      199      200  #> 5689.028 6284.553 6422.299 6848.322 8412.144 5953.606 5330.208 6794.527  #>      201      202      203      204      205      206      207      208  #> 6125.811 6001.644 6578.588 6495.348 5966.723 7775.976 4944.345 5885.834  #>      209      210      211      212      213      214      215      216  #> 7648.779 5357.603 6869.724 6066.624 6030.433 7593.993 7683.360 7457.460  #>      217      218      219      220      221      222      223      224  #> 5868.477 7586.109 7170.624 6687.964 5437.511 6393.324 6109.968 5763.697  #>      225      226      227      228      229      230      231      232  #> 8206.366 5924.408 6295.905 5746.729 5995.474 7565.798 7136.765 7477.150  #>      233      234      235      236      237      238      239      240  #> 8362.617 6904.169 6184.111 7320.046 5929.559 5632.414 6441.408 6765.401  #>      241      242      243      244      245      246      247      248  #> 5889.105 7862.103 6099.654 4991.337 6841.235 7193.836 6544.202 5532.230  #>      249      250      251      252      253      254      255      256  #> 7048.373 5667.930 5574.095 7211.219 6317.915 6521.687 7126.394 5619.901  #>      257      258      259      260      261      262      263      264  #> 6035.829 5399.919 5788.256 7449.717 4060.268 6318.630 5604.818 8676.259  #>      265      266      267      268      269      270      271      272  #> 6302.037 4934.697 6786.365 6876.233 6826.034 5631.543 7322.045 7413.243  #>      273      274      275      276      277      278      279      280  #> 5908.308 7019.507 6412.924 8025.616 6798.272 7587.134 7390.018 7090.875  #>      281      282      283      284      285      286      287      288  #> 7157.391 5334.951 5626.114 6540.264 7904.521 6717.025 6528.334 4869.434  #>      289      290      291      292      293      294      295      296  #> 5814.451 5573.749 6389.860 6575.074 5782.319 7572.580 5881.327 5919.935  #>      297      298      299      300      301      302      303      304  #> 6487.915 6136.456 6568.070 6922.463 8126.692 6806.425 8275.516 6029.596  #>      305      306      307      308      309      310      311      312  #> 6301.706 7270.884 5913.753 8218.546 6725.495 5826.919 5299.917 6984.101  #>      313      314      315      316      317      318      319      320  #> 6931.458 7184.770 5799.327 5533.412 6236.289 5136.554 7434.008 6420.101  #>      321      322      323      324      325      326      327      328  #> 8552.462 5930.935 6086.786 6241.706 7713.042 6793.976 5456.381 6108.054  #>      329      330      331      332      333      334      335      336  #> 6699.341 5963.251 7516.234 5827.800 7132.718 6369.051 7277.840 6315.533  #>      337      338      339      340      341      342      343      344  #> 7098.126 6827.736 7213.580 7255.797 6293.986 6472.462 6062.911 7218.634  #>      345      346      347      348      349      350      351      352  #> 6052.513 5240.996 6712.572 7926.542 7083.821 6124.678 7976.134 6668.810  #>      353      354      355      356      357      358      359      360  #> 7552.130 7848.743 7133.763 9020.163 5908.280 6626.493 6319.336 6948.762  #>      361      362      363      364      365      366      367      368  #> 7078.781 6995.973 6159.789 6675.732 7896.857 8560.822 6594.962 5359.732  #>      369      370      371      372      373      374      375      376  #> 5783.347 5743.286 6177.017 5877.047 6465.341 6166.324 6625.031 5166.195  #>      377      378      379      380      381      382      383      384  #> 5824.943 6956.254 6849.930 7455.865 7243.500 6295.138 7592.910 6616.748  #>      385      386      387      388      389      390      391      392  #> 5682.624 7245.582 6006.397 8471.902 6997.524 5374.284 7173.292 6775.784  #>      393      394      395      396      397      398      399      400  #> 6637.279 8399.570 6992.324 6014.283 6989.581 6563.432 6744.687 6832.647  #>      401      402      403      404      405      406      407      408  #> 7358.311 6817.467 7658.621 7688.747 7440.909 7909.164 5871.422 8839.278  #>      409      410      411      412      413      414      415      416  #> 6035.326 6353.896 5808.010 8124.111 5941.151 7053.657 6855.814 6185.920  #>      417      418      419      420      421      422      423      424  #> 7051.917 6129.481 6955.991 6836.320 5934.141 7242.391 6809.946 6087.901  #>      425      426      427      428      429      430      431      432  #> 5476.632 6657.740 7508.467 7582.255 6254.440 6962.778 6563.426 6863.976  #>      433      434      435      436      437      438      439      440  #> 6787.891 7246.169 8053.271 6415.865 7353.807 6995.639 6991.630 6257.776  #>      441      442      443      444      445      446      447      448  #> 8767.427 6578.275 5053.169 6722.696 6067.139 6102.534 6096.265 7631.003  #>      449      450      451      452      453      454      455      456  #> 5158.090 7813.609 6204.944 5419.874 6060.528 6749.025 5475.222 5966.580  #>      457      458      459      460      461      462      463      464  #> 7924.950 6682.756 6170.653 8090.692 5766.812 7326.426 5729.922 5988.583  #>      465      466      467      468      469      470      471      472  #> 5528.841 6270.466 7375.933 6021.984 6359.143 6046.785 6968.952 6910.191  #>      473      474      475      476      477      478      479      480  #> 8053.836 7046.044 6049.573 7556.126 6732.662 7747.697 8133.011 7220.327  #>      481      482      483      484      485      486      487      488  #> 6902.956 5611.027 7205.584 6708.607 6564.488 5276.263 6527.790 5793.178  #>      489      490      491      492      493      494      495      496  #> 5395.177 8686.422 7248.430 7634.542 6985.081 5619.762 5407.764 6601.611  #>      497      498      499      500  #> 6568.168 6719.200 6607.351 6555.875  predict(lm_beta_x, model_type = \"raw\") #>        1        2        3        4        5        6        7        8  #> 6421.680 6530.429 6487.252 6107.743 6284.481 5153.358 6662.658 7827.410  #>        9       10       11       12       13       14       15       16  #> 7029.198 8156.635 6019.411 5574.344 6180.277 7010.803 4963.590 6059.476  #>       17       18       19       20       21       22       23       24  #> 7239.020 6698.976 6764.336 5353.118 7577.253 7719.758 6576.826 8237.401  #>       25       26       27       28       29       30       31       32  #> 8200.935 7931.369 6569.994 6882.033 8267.304 7128.476 5959.531 6920.342  #>       33       34       35       36       37       38       39       40  #> 5887.038 6007.579 5586.136 6880.800 5452.636 7665.795 6564.230 6089.381  #>       41       42       43       44       45       46       47       48  #> 7046.119 5101.476 6404.048 6188.349 6429.859 7628.757 7847.636 6881.857  #>       49       50       51       52       53       54       55       56  #> 6592.794 7275.835 6087.745 6132.776 6378.544 6454.268 5449.982 7631.170  #>       57       58       59       60       61       62       63       64  #> 6713.771 6819.890 7710.031 6261.576 5468.773 5283.316 6904.287 5694.848  #>       65       66       67       68       69       70       71       72  #> 5338.961 7166.193 6417.537 6584.919 5788.587 7106.867 6478.441 4945.244  #>       73       74       75       76       77       78       79       80  #> 4720.702 5969.793 6776.512 6825.743 6467.491 5401.580 5291.916 6058.456  #>       81       82       83       84       85       86       87       88  #> 5960.974 5662.433 7254.471 7000.237 7692.378 5039.460 6057.840 6331.362  #>       89       90       91       92       93       94       95       96  #> 6532.205 5538.184 5749.854 7334.872 6434.210 6442.079 5618.349 7410.285  #>       97       98       99      100      101      102      103      104  #> 5891.992 6688.047 7174.997 5234.916 5729.762 7843.111 6855.171 6811.118  #>      105      106      107      108      109      110      111      112  #> 5805.968 6535.212 5729.227 6194.901 5697.342 7666.604 6222.894 6451.290  #>      113      114      115      116      117      118      119      120  #> 7328.785 7098.303 6081.005 6725.354 6567.422 6935.756 6410.174 7128.479  #>      121      122      123      124      125      126      127      128  #> 6715.371 6660.228 5197.764 6106.589 7344.590 7526.230 6279.533 5559.357  #>      129      130      131      132      133      134      135      136  #> 7033.286 6542.692 7144.951 7685.140 6446.983 6501.323 7291.124 6796.924  #>      137      138      139      140      141      142      143      144  #> 7385.154 8119.350 5659.128 5534.587 7661.700 7252.737 5721.102 5441.864  #>      145      146      147      148      149      150      151      152  #> 6767.296 5303.049 7127.611 5868.182 6265.856 7428.265 5928.060 6519.315  #>      153      154      155      156      157      158      159      160  #> 6212.102 6619.222 6161.753 6646.573 6267.180 5697.635 7634.741 7476.451  #>      161      162      163      164      165      166      167      168  #> 6368.692 7718.742 6548.494 7614.872 7199.461 6022.501 6292.890 7695.434  #>      169      170      171      172      173      174      175      176  #> 7391.428 6960.239 6813.179 7781.359 6785.648 7620.418 6547.261 6510.296  #>      177      178      179      180      181      182      183      184  #> 6435.727 6062.403 7265.656 5537.013 5569.140 5759.934 5044.076 7994.875  #>      185      186      187      188      189      190      191      192  #> 5238.464 7685.679 6051.276 4877.087 6937.267 7232.846 6657.324 5865.098  #>      193      194      195      196      197      198      199      200  #> 5689.028 6284.553 6422.299 6848.322 8412.144 5953.606 5330.208 6794.527  #>      201      202      203      204      205      206      207      208  #> 6125.811 6001.644 6578.588 6495.348 5966.723 7775.976 4944.345 5885.834  #>      209      210      211      212      213      214      215      216  #> 7648.779 5357.603 6869.724 6066.624 6030.433 7593.993 7683.360 7457.460  #>      217      218      219      220      221      222      223      224  #> 5868.477 7586.109 7170.624 6687.964 5437.511 6393.324 6109.968 5763.697  #>      225      226      227      228      229      230      231      232  #> 8206.366 5924.408 6295.905 5746.729 5995.474 7565.798 7136.765 7477.150  #>      233      234      235      236      237      238      239      240  #> 8362.617 6904.169 6184.111 7320.046 5929.559 5632.414 6441.408 6765.401  #>      241      242      243      244      245      246      247      248  #> 5889.105 7862.103 6099.654 4991.337 6841.235 7193.836 6544.202 5532.230  #>      249      250      251      252      253      254      255      256  #> 7048.373 5667.930 5574.095 7211.219 6317.915 6521.687 7126.394 5619.901  #>      257      258      259      260      261      262      263      264  #> 6035.829 5399.919 5788.256 7449.717 4060.268 6318.630 5604.818 8676.259  #>      265      266      267      268      269      270      271      272  #> 6302.037 4934.697 6786.365 6876.233 6826.034 5631.543 7322.045 7413.243  #>      273      274      275      276      277      278      279      280  #> 5908.308 7019.507 6412.924 8025.616 6798.272 7587.134 7390.018 7090.875  #>      281      282      283      284      285      286      287      288  #> 7157.391 5334.951 5626.114 6540.264 7904.521 6717.025 6528.334 4869.434  #>      289      290      291      292      293      294      295      296  #> 5814.451 5573.749 6389.860 6575.074 5782.319 7572.580 5881.327 5919.935  #>      297      298      299      300      301      302      303      304  #> 6487.915 6136.456 6568.070 6922.463 8126.692 6806.425 8275.516 6029.596  #>      305      306      307      308      309      310      311      312  #> 6301.706 7270.884 5913.753 8218.546 6725.495 5826.919 5299.917 6984.101  #>      313      314      315      316      317      318      319      320  #> 6931.458 7184.770 5799.327 5533.412 6236.289 5136.554 7434.008 6420.101  #>      321      322      323      324      325      326      327      328  #> 8552.462 5930.935 6086.786 6241.706 7713.042 6793.976 5456.381 6108.054  #>      329      330      331      332      333      334      335      336  #> 6699.341 5963.251 7516.234 5827.800 7132.718 6369.051 7277.840 6315.533  #>      337      338      339      340      341      342      343      344  #> 7098.126 6827.736 7213.580 7255.797 6293.986 6472.462 6062.911 7218.634  #>      345      346      347      348      349      350      351      352  #> 6052.513 5240.996 6712.572 7926.542 7083.821 6124.678 7976.134 6668.810  #>      353      354      355      356      357      358      359      360  #> 7552.130 7848.743 7133.763 9020.163 5908.280 6626.493 6319.336 6948.762  #>      361      362      363      364      365      366      367      368  #> 7078.781 6995.973 6159.789 6675.732 7896.857 8560.822 6594.962 5359.732  #>      369      370      371      372      373      374      375      376  #> 5783.347 5743.286 6177.017 5877.047 6465.341 6166.324 6625.031 5166.195  #>      377      378      379      380      381      382      383      384  #> 5824.943 6956.254 6849.930 7455.865 7243.500 6295.138 7592.910 6616.748  #>      385      386      387      388      389      390      391      392  #> 5682.624 7245.582 6006.397 8471.902 6997.524 5374.284 7173.292 6775.784  #>      393      394      395      396      397      398      399      400  #> 6637.279 8399.570 6992.324 6014.283 6989.581 6563.432 6744.687 6832.647  #>      401      402      403      404      405      406      407      408  #> 7358.311 6817.467 7658.621 7688.747 7440.909 7909.164 5871.422 8839.278  #>      409      410      411      412      413      414      415      416  #> 6035.326 6353.896 5808.010 8124.111 5941.151 7053.657 6855.814 6185.920  #>      417      418      419      420      421      422      423      424  #> 7051.917 6129.481 6955.991 6836.320 5934.141 7242.391 6809.946 6087.901  #>      425      426      427      428      429      430      431      432  #> 5476.632 6657.740 7508.467 7582.255 6254.440 6962.778 6563.426 6863.976  #>      433      434      435      436      437      438      439      440  #> 6787.891 7246.169 8053.271 6415.865 7353.807 6995.639 6991.630 6257.776  #>      441      442      443      444      445      446      447      448  #> 8767.427 6578.275 5053.169 6722.696 6067.139 6102.534 6096.265 7631.003  #>      449      450      451      452      453      454      455      456  #> 5158.090 7813.609 6204.944 5419.874 6060.528 6749.025 5475.222 5966.580  #>      457      458      459      460      461      462      463      464  #> 7924.950 6682.756 6170.653 8090.692 5766.812 7326.426 5729.922 5988.583  #>      465      466      467      468      469      470      471      472  #> 5528.841 6270.466 7375.933 6021.984 6359.143 6046.785 6968.952 6910.191  #>      473      474      475      476      477      478      479      480  #> 8053.836 7046.044 6049.573 7556.126 6732.662 7747.697 8133.011 7220.327  #>      481      482      483      484      485      486      487      488  #> 6902.956 5611.027 7205.584 6708.607 6564.488 5276.263 6527.790 5793.178  #>      489      490      491      492      493      494      495      496  #> 5395.177 8686.422 7248.430 7634.542 6985.081 5619.762 5407.764 6601.611  #>      497      498      499      500  #> 6568.168 6719.200 6607.351 6555.875"},{"path":"https://sfcheung.github.io/betaselectr/reference/print.lav_betaselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Print a 'lav_betaselect' Object — print.lav_betaselect","title":"Print a 'lav_betaselect' Object — print.lav_betaselect","text":"Print method 'lav_betaselect' object, output lav_betaselect().","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/print.lav_betaselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print a 'lav_betaselect' Object — print.lav_betaselect","text":"","code":"# S3 method for lav_betaselect print(x, ..., nd = 3, output = c(\"table\", \"text\"), standardized_only = FALSE)"},{"path":"https://sfcheung.github.io/betaselectr/reference/print.lav_betaselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print a 'lav_betaselect' Object — print.lav_betaselect","text":"x Object class std_solution_boot. ... Optional arguments passed print() methods. nd number digits decimal place. Default 3. output String. results printed. Default \"table\" results printed table format similar lavaan::parameterEstimates() output set \"table\". \"text\", results printed text format similar printout output summary() lavaan object. standardized_only Logical. TRUE, results standardized solution printed. FALSE, default, standardized solution printed alongside unstandardized solution, printout output summary() lavaan object.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/print.lav_betaselect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print a 'lav_betaselect' Object — print.lav_betaselect","text":"x returned invisibly. Called side effect.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/print.lav_betaselect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print a 'lav_betaselect' Object — print.lav_betaselect","text":"default format printout lavaan::parameterEstimates(), compact easy read. Users can request format similar printout summary lavaan output setting output \"text\". \"text\" format, users can also select whether standardized solution printed whether standardized solution appended right printout, output summary() lavaan output.","code":""},{"path":[]},{"path":"https://sfcheung.github.io/betaselectr/reference/print.lav_betaselect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print a 'lav_betaselect' Object — print.lav_betaselect","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/print.lav_betaselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print a 'lav_betaselect' Object — print.lav_betaselect","text":"","code":"# \\donttest{ # TO ADD # }"},{"path":"https://sfcheung.github.io/betaselectr/reference/std_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Standardize Selected Variables — std_data","title":"Standardize Selected Variables — std_data","text":"Standardize selected variables data frame similar object.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/std_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standardize Selected Variables — std_data","text":"","code":"std_data(data, to_standardize)"},{"path":"https://sfcheung.github.io/betaselectr/reference/std_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standardize Selected Variables — std_data","text":"data data frame similar object. to_standardize character vector column names variables standardized.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/std_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standardize Selected Variables — std_data","text":"data frame similar data, selected variables standardized.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/std_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Standardize Selected Variables — std_data","text":"helper functions used lm_betaselect(). assumes variables selected checked whether numeric.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/std_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Standardize Selected Variables — std_data","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/std_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standardize Selected Variables — std_data","text":"","code":"data(data_test_mod_cat) dat <- data_test_mod_cat dat <- std_data(dat, to_standardize = c(\"iv\", \"dv\")) colMeans(dat[, c(\"dv\", \"iv\")]) #>           dv           iv  #> 2.078719e-16 4.026692e-16  apply(dat[, c(\"dv\", \"iv\")], 2, sd) #> dv iv  #>  1  1"},{"path":"https://sfcheung.github.io/betaselectr/reference/summary.lm_betaselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of an 'lm_betaselect'-Class Object — summary.lm_betaselect","title":"Summary of an 'lm_betaselect'-Class Object — summary.lm_betaselect","text":"summary method lm_betaselect-class objects.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/summary.lm_betaselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of an 'lm_betaselect'-Class Object — summary.lm_betaselect","text":"","code":"# S3 method for lm_betaselect summary(   object,   correlation = FALSE,   symbolic.cor = FALSE,   se_method = c(\"boot\", \"bootstrap\", \"t\", \"lm\", \"ls\"),   ci = FALSE,   level = 0.95,   boot_type = c(\"perc\", \"bc\"),   boot_pvalue_type = c(\"asymmetric\", \"norm\"),   type = c(\"beta\", \"standardized\", \"raw\", \"unstandardized\"),   ... )  # S3 method for summary.lm_betaselect print(   x,   est_digits = 3,   symbolic.cor = x$symbolic.cor,   signif.stars = getOption(\"show.signif.stars\"),   tz_digits = 3,   pvalue_less_than = 0.001,   ... )"},{"path":"https://sfcheung.github.io/betaselectr/reference/summary.lm_betaselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of an 'lm_betaselect'-Class Object — summary.lm_betaselect","text":"object output lm_betaselect(). correlation TRUE, correlation matrix estimates returned. argument stats::summary.lm(). Default FALSE. symbolic.cor TRUE, correlations printed symbolic form stats::summary.lm(). Default FALSE. se_method method used compute standard errors confidence intervals (requested). bootstrapping requested calling lm_betaselect() argument set \"bootstrap\" \"boot\", bootstrap standard errors returned. bootstrapping requested argument set \"t\", \"lm\", \"ls\", usual lm standard errors returned, warning raised unless type \"raw\" \"unstandardized\". Default \"boot\". ci Logical. Whether confidence intervals computed. Default FALSE. level level confidence, default .95, returning 95% confidence interval. boot_type type bootstrap confidence intervals, requested. Currently, supports \"perc\", percentile bootstrap confidence intervals, \"bc\", bias-corrected bootstrap confidence interval. boot_pvalue_type type p-values se_method \"boot\" \"bootstrap\". \"norm\", z score used compute p-value using standard normal distribution. \"asymmetric\", default, method presented Asparouhov Muthén (2021) used compute p-value based bootstrap distribution. type String. \"unstandardized\" \"raw\", output standardization used \"beta\" \"standardized\", output selected variables standardized returned. Default \"beta\". ... Additional arguments passed methods. x output summary.lm_betaselect(). est_digits number digits decimal displayed coefficient estimates, standard errors, confidence intervals (present). Note values rounded number digits printing. digits position zero values, values may displayed fewer digits. Note coefficient table printed stats::printCoefmat(). numbers vary large, number digits decimal may smaller est_digits due limit column width. value also determines number digits displayed R-squared. signif.stars Whether \"stars\" (asterisks) printed denote level significance achieved coefficient. Default TRUE. tz_digits number digits decimal displayed t similar statistic (column \"t value\" \"z value\"). value also determines number digits F statistic R-squared. pvalue_less_than p-value less value, displayed \"<(value)\". example, pvalue_less_than .001, default, p-values less .001 displayed <.001. value also determines printout p-value F statistic. (argument eps.Pvalue stats::printCoefmat().)","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/summary.lm_betaselect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of an 'lm_betaselect'-Class Object — summary.lm_betaselect","text":"returns object class summary.lm_betaselect, similar output stats::summary.lm(), additional information standardization bootstrapping, requested. print-method summary.lm_betaselect called side effect. object x returned invisibly.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/summary.lm_betaselect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary of an 'lm_betaselect'-Class Object — summary.lm_betaselect","text":"default, returns summary.lm_betaselect-class object results selected variables standardized. setting type \"raw\" \"unstandardized\", return summary results standardization. print method summary.lm_betaselect-class objects adapted stdmod::print.summary.std_selected().","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/summary.lm_betaselect.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Summary of an 'lm_betaselect'-Class Object — summary.lm_betaselect","text":"Asparouhov, ., & Muthén, B. (2021). Bootstrap p-value computation. Retrieved https://www.statmodel.com/download/FAQ-Bootstrap%20-%20Pvalue.pdf","code":""},{"path":[]},{"path":"https://sfcheung.github.io/betaselectr/reference/summary.lm_betaselect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary of an 'lm_betaselect'-Class Object — summary.lm_betaselect","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/summary.lm_betaselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of an 'lm_betaselect'-Class Object — summary.lm_betaselect","text":"","code":"data(data_test_mod_cat)  # bootstrap should be set to 2000 or 5000 in real studies lm_beta_x <- lm_betaselect(dv ~ iv*mod + cov1 + cat1,                            data = data_test_mod_cat,                            to_standardize = \"iv\",                            do_boot = TRUE,                            bootstrap = 100,                            iseed = 1234)  summary(lm_beta_x) #> Call to lm_betaselect(): #> betaselectr::lm_betaselect(formula = dv ~ iv * mod + cov1 + cat1,  #>     data = data_test_mod_cat, to_standardize = \"iv\", do_boot = TRUE,  #>     bootstrap = 100, iseed = 1234) #>  #> Variable(s) standardized: iv  #>  #> Call: #> stats::lm(formula = dv ~ iv * mod + cov1 + cat1, data = betaselectr::std_data(data = data_test_mod_cat,  #>     to_standardize = \"iv\")) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1987.03  -463.99     0.25   455.14  2152.48  #>  #> Coefficients: #>             Estimate Std. Error z value Pr(Boot)     #> (Intercept)  790.550    584.405   1.353     0.20     #> iv           -94.302    625.286  -0.151     0.10     #> mod           57.578      6.031   9.547     0.56     #> cov1          10.024      9.457   1.060     0.18     #> cat1gp2     -112.588     74.809  -1.505     0.80     #> cat1gp3      -53.106     73.524  -0.722     0.14     #> iv:mod         8.661      6.203   1.396   <0.001 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 681.1 on 493 degrees of freedom #>  #> R-squared                : 0.602 #> Adjusted R-squared       : 0.597 #> ANOVA test of R-squared : F(6, 493) = 124.344, p < 0.001 #>  #> Note: #> - Results *after* standardization are reported. #> - Nonparametric bootstrapping conducted. #> - The number of bootstrap samples is 100. #> - Standard errors are bootstrap standard errors. #> - Z values are computed by 'Estimate / Std. Error'. #> - The bootstrap p-values are asymmetric p-values by Asparouhov and #>   Muthén (2021). summary(lm_beta_x, ci = TRUE) #> Call to lm_betaselect(): #> betaselectr::lm_betaselect(formula = dv ~ iv * mod + cov1 + cat1,  #>     data = data_test_mod_cat, to_standardize = \"iv\", do_boot = TRUE,  #>     bootstrap = 100, iseed = 1234) #>  #> Variable(s) standardized: iv  #>  #> Call: #> stats::lm(formula = dv ~ iv * mod + cov1 + cat1, data = betaselectr::std_data(data = data_test_mod_cat,  #>     to_standardize = \"iv\")) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1987.03  -463.99     0.25   455.14  2152.48  #>  #> Coefficients: #>              Estimate  CI.Lower  CI.Upper Std. Error z value Pr(Boot)     #> (Intercept)   790.550  -430.112  1905.572    584.405   1.353     0.20     #> iv            -94.302 -1569.880   981.851    625.286  -0.151     0.10     #> mod            57.578    45.592    70.397      6.031   9.547     0.56     #> cov1           10.024    -5.933    35.460      9.457   1.060     0.18     #> cat1gp2      -112.588  -263.297    32.218     74.809  -1.505     0.80     #> cat1gp3       -53.106  -209.176    88.391     73.524  -0.722     0.14     #> iv:mod          8.661    -1.968    22.601      6.203   1.396   <0.001 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 681.1 on 493 degrees of freedom #>  #> R-squared                : 0.602 #> Adjusted R-squared       : 0.597 #> ANOVA test of R-squared : F(6, 493) = 124.344, p < 0.001 #>  #> Note: #> - Results *after* standardization are reported. #> - Nonparametric bootstrapping conducted. #> - The number of bootstrap samples is 100. #> - Standard errors are bootstrap standard errors. #> - Z values are computed by 'Estimate / Std. Error'. #> - The bootstrap p-values are asymmetric p-values by Asparouhov and #>   Muthén (2021). #> - Percentile bootstrap 95.0% confidence interval reported. summary(lm_beta_x, boot_pvalue_type = \"norm\") #> Call to lm_betaselect(): #> betaselectr::lm_betaselect(formula = dv ~ iv * mod + cov1 + cat1,  #>     data = data_test_mod_cat, to_standardize = \"iv\", do_boot = TRUE,  #>     bootstrap = 100, iseed = 1234) #>  #> Variable(s) standardized: iv  #>  #> Call: #> stats::lm(formula = dv ~ iv * mod + cov1 + cat1, data = betaselectr::std_data(data = data_test_mod_cat,  #>     to_standardize = \"iv\")) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1987.03  -463.99     0.25   455.14  2152.48  #>  #> Coefficients: #>             Estimate Std. Error z value Pr(>|z|)     #> (Intercept)  790.550    584.405   1.353    0.176     #> iv           -94.302    625.286  -0.151    0.880     #> mod           57.578      6.031   9.547   <0.001 *** #> cov1          10.024      9.457   1.060    0.289     #> cat1gp2     -112.588     74.809  -1.505    0.132     #> cat1gp3      -53.106     73.524  -0.722    0.470     #> iv:mod         8.661      6.203   1.396    0.163     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 681.1 on 493 degrees of freedom #>  #> R-squared                : 0.602 #> Adjusted R-squared       : 0.597 #> ANOVA test of R-squared : F(6, 493) = 124.344, p < 0.001 #>  #> Note: #> - Results *after* standardization are reported. #> - Nonparametric bootstrapping conducted. #> - The number of bootstrap samples is 100. #> - Standard errors are bootstrap standard errors. #> - Z values are computed by 'Estimate / Std. Error'. #> - The bootstrap p-values are based on standard normal distribution #>   using z values. summary(lm_beta_x, type = \"raw\") #> Call to lm_betaselect(): #> betaselectr::lm_betaselect(formula = dv ~ iv * mod + cov1 + cat1,  #>     data = data_test_mod_cat, to_standardize = \"iv\", do_boot = TRUE,  #>     bootstrap = 100, iseed = 1234) #>  #> Variable(s) standardized: iv  #>  #> Call: #> stats::lm(formula = dv ~ iv * mod + cov1 + cat1, data = data_test_mod_cat) #>  #> Residuals: #>      Min       1Q   Median       3Q      Max  #> -1987.03  -463.99     0.25   455.14  2152.48  #>  #> Coefficients: #>             Estimate Std. Error z value Pr(Boot)     #> (Intercept) 1488.568    584.405   2.547     0.20     #> iv           -46.545    625.286  -0.074     0.10     #> mod           -6.530      6.031  -1.083     0.56     #> cov1          10.024      9.457   1.060     0.18     #> cat1gp2     -112.588     74.809  -1.505     0.80     #> cat1gp3      -53.106     73.524  -0.722     0.14     #> iv:mod         4.275      6.203   0.689   <0.001 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 681.1 on 493 degrees of freedom #>  #> R-squared                : 0.602 #> Adjusted R-squared       : 0.597 #> ANOVA test of R-squared : F(6, 493) = 124.344, p < 0.001 #>  #> Note: #> - Results *before* standardization are reported. #> - Nonparametric bootstrapping conducted. #> - The number of bootstrap samples is 100. #> - Standard errors are bootstrap standard errors. #> - Z values are computed by 'Estimate / Std. Error'. #> - The bootstrap p-values are asymmetric p-values by Asparouhov and #>   Muthén (2021)."},{"path":"https://sfcheung.github.io/betaselectr/reference/vcov.lm_betaselect.html","id":null,"dir":"Reference","previous_headings":"","what":"The 'vcov' Method for an 'lm_betaselect'-Class Object — vcov.lm_betaselect","title":"The 'vcov' Method for an 'lm_betaselect'-Class Object — vcov.lm_betaselect","text":"Compute variance-covariance matrix estimates output lm_betaselect().","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/vcov.lm_betaselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The 'vcov' Method for an 'lm_betaselect'-Class Object — vcov.lm_betaselect","text":"","code":"# S3 method for lm_betaselect vcov(   object,   method = c(\"boot\", \"bootstrap\", \"ls\"),   type = c(\"beta\", \"standardized\", \"raw\", \"unstandardized\"),   warn = TRUE,   ... )"},{"path":"https://sfcheung.github.io/betaselectr/reference/vcov.lm_betaselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The 'vcov' Method for an 'lm_betaselect'-Class Object — vcov.lm_betaselect","text":"object output lm_betaselect() lm_betaselect-class object. method method used compute variance-covariance matrix. bootstrapping requested calling lm_betaselect() argument set \"bootstrap\" \"boot\", bootstrap variance-covariance matrix returned. bootstrapping requested argument set \"ls\", usual lm variance-covariance matrix returned, warning raised unless type \"raw\" \"unstandardized\". Default \"boot\". type String. \"unstandardized\" \"raw\", variance-covariance matrix coefficients standardization returned. \"beta\" \"standardized\", variance-covariance matrix coefficients selected variables standardized returned. Default \"beta\". warn Logical. WHether warning raised OLS (WLS) variance-covariance matrix requested model variables standardized (.e., type \"beta\" \"standardized\"). Default TRUE. ... arguments passed stats::vcov().","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/vcov.lm_betaselect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The 'vcov' Method for an 'lm_betaselect'-Class Object — vcov.lm_betaselect","text":"matrix variances covariances parameter estimates.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/vcov.lm_betaselect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The 'vcov' Method for an 'lm_betaselect'-Class Object — vcov.lm_betaselect","text":"type variance-covariance matrix depends object. bootstrapping requested, default returns bootstrap variance-covariance matrix. Otherwise, returns OLS (WLS) variance-covariance matrix raises warning. Support type variance-covariance matrix added.","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/vcov.lm_betaselect.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The 'vcov' Method for an 'lm_betaselect'-Class Object — vcov.lm_betaselect","text":"Shu Fai Cheung https://orcid.org/0000-0002-9871-9448","code":""},{"path":"https://sfcheung.github.io/betaselectr/reference/vcov.lm_betaselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The 'vcov' Method for an 'lm_betaselect'-Class Object — vcov.lm_betaselect","text":"","code":"data(data_test_mod_cat)  # bootstrap should be set to 2000 or 5000 in real studies lm_beta_x <- lm_betaselect(dv ~ iv*mod + cov1 + cat1,                            data = data_test_mod_cat,                            to_standardize = \"iv\",                            do_boot = TRUE,                            bootstrap = 100,                            iseed = 1234) vcov(lm_beta_x) #>             (Intercept)          iv          mod        cov1      cat1gp2 #> (Intercept) 341529.1966 -30895.9870 -3464.959234  719.311869   6119.71357 #> iv          -30895.9870 390982.0777   418.709645 -934.754965 -11173.61930 #> mod          -3464.9592    418.7096    36.371280  -15.826380    -98.89705 #> cov1           719.3119   -934.7550   -15.826380   89.431977    110.16302 #> cat1gp2       6119.7136 -11173.6193   -98.897047  110.163020   5596.41208 #> cat1gp3        168.9982  -6374.1237   -27.706276  -11.015161   2379.59442 #> iv:mod         317.3652  -3869.0948    -4.181951    8.995417    104.91294 #>                 cat1gp3       iv:mod #> (Intercept)   168.99821   317.365230 #> iv          -6374.12372 -3869.094815 #> mod           -27.70628    -4.181951 #> cov1          -11.01516     8.995417 #> cat1gp2      2379.59442   104.912942 #> cat1gp3      5405.70924    61.328872 #> iv:mod         61.32887    38.479356 vcov(lm_beta_x, method = \"ls\") #> Warning: With standardization, the variance-covariance matrix using OLS or WLS should not be used. #>               (Intercept)           iv           mod          cov1     cat1gp2 #> (Intercept) 384454.213030    855.64316 -3723.4966214 -1097.5954358  -632.86557 #> iv             855.643164 369545.84716    36.6391492  -270.3857355 -2377.70021 #> mod          -3723.496621     36.63915    37.3035605     0.8903597   -20.15980 #> cov1         -1097.595436   -270.38574     0.8903597   103.4952425   -33.43135 #> cat1gp2       -632.865575  -2377.70021   -20.1598049   -33.4313529  5783.03424 #> cat1gp3        474.235748  -1276.79274   -30.9821620   -35.2964697  2994.51496 #> iv:mod          -1.815315  -3681.99659    -0.4181725     2.6484043    22.01237 #>                 cat1gp3        iv:mod #> (Intercept)   474.23575    -1.8153150 #> iv          -1276.79274 -3681.9965904 #> mod           -30.98216    -0.4181725 #> cov1          -35.29647     2.6484043 #> cat1gp2      2994.51496    22.0123669 #> cat1gp3      5643.94687    11.5915722 #> iv:mod         11.59157    36.7790296 vcov(lm_beta_x, type = \"raw\") #>              (Intercept)            iv           mod        cov1     cat1gp2 #> (Intercept) 22377927.302 -1455331.0752 -224020.61098 7757.749242 89893.97909 #> iv          -1455331.075    96108.5731   14544.46771 -468.507751 -5592.14211 #> mod          -224020.611    14544.4677    2249.82334  -85.068231  -901.81123 #> cov1            7757.749     -468.5078     -85.06823   89.431977   110.16302 #> cat1gp2        89893.979    -5592.1421    -901.81123  110.163020  5596.41208 #> cat1gp3        49297.662    -3270.8129    -513.93637  -11.015161  2379.59442 #> iv:mod         14484.706     -955.2700    -145.18126    4.575244    53.41171 #>                 cat1gp3       iv:mod #> (Intercept) 49297.66173 14484.705612 #> iv          -3270.81287  -955.269975 #> mod          -513.93637  -145.181261 #> cov1          -11.01516     4.575244 #> cat1gp2      2379.59442    53.411713 #> cat1gp3      5405.70924    32.167824 #> iv:mod         32.16782     9.524374"},{"path":"https://sfcheung.github.io/betaselectr/news/index.html","id":"betaselectr-0012","dir":"Changelog","previous_headings":"","what":"betaselectr 0.0.1.2","title":"betaselectr 0.0.1.2","text":"Added lm_betaselect() related methods helper functions. (0.0.1.1) Added parallel processing support internal function find_all_products(). (0.0.1.2) lav_betaselect(), added option skip finding product terms. (0.0.1.2)","code":""}]
