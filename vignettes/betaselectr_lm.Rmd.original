---
title: "Beta-Select Demonstration: Regression by `lm()`"
date: "`r Sys.Date()`"
output:
  rmarkdown::html_vignette:
    number_sections: true
vignette: >
  %\VignetteIndexEntry{Beta-Select Demonstration: Regression by `lm()`}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
bibliography: "references.bib"
csl: apa.csl
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = ""
)
```

```{r, echo = FALSE}
format_str <- function(x, digits = 3) {
    formatC(x, digits = digits, format = "f")
  }
```

# Introduction

This article demonstrates how to use
`lm_betaselect()` from the package
[`betaselectr`](https://sfcheung.github.io/betaselectr/)
to standardize
selected variables in a model fitted
by `lm()` and forming confidence
intervals for the parameters.

# Data and Model

The sample dataset from the package
`betaselectr` will be used for this
demonstration:

```{r}
library(betaselectr)
head(data_test_mod_cat2)
```

This is the regression model, fitted by
`lm()`:

```{r}
lm_out <- lm(dv ~ iv * mod + cov1 + cat1,
             data = data_test_mod_cat2)
```

The model has a moderator, `mod`, posited
to moderate the effect from `iv` to
`med`. The product term is `iv:mod`.
The variable `cat1` is a categorical variable
with three groups: `gp1`, `gp2`, `gp3`.

These are the results:

```{r}
summary(lm_out)
```

# Problems With Standardization

One common type of standardized coefficients,
called "betas" in some programs, is
computed by standardizing *all* terms
in the model.

First, all variables in the model,
including the product term and dummy
variables, are computed:

```{r}
data_test_mod_cat2_z <- data_test_mod_cat2
data_test_mod_cat2_z$iv_x_mod <- data_test_mod_cat2_z$iv *
                                data_test_mod_cat2_z$mod
data_test_mod_cat2_z$cat_gp2 <- as.numeric(data_test_mod_cat2_z$cat1 == "gp2")
data_test_mod_cat2_z$cat_gp3 <- as.numeric(data_test_mod_cat2_z$cat1 == "gp3")
head(data_test_mod_cat2_z)
```

All the variables are then standardized:

```{r}
data_test_mod_cat2_z <- data.frame(scale(data_test_mod_cat2_z[, -5]))
head(data_test_mod_cat2_z)
```

The regression model is then fitted to the
standardized variables:

```{r}
lm_std_common <- lm(dv ~ iv + mod + cov1 + cat_gp2 + cat_gp3 + iv_x_mod,
                    data = data_test_mod_cat2_z)
```

The "betas" commonly reported are the
coefficients in this model:

```{r}
lm_std_common_summary <- summary(lm_std_common)
printCoefmat(lm_std_common_summary$coefficients,
             digits = 5,
             zap.ind = 1,
             P.values = TRUE,
             has.Pvalue = TRUE,
             signif.stars = TRUE)
```

However, for this model, there are several
problems:

- The product term is also
  standardized (`iv_x_mod`, computed
  using the standard deviations of
  `dv` and `iv:mod`). This is inappropriate [@hayes_introduction_2022].
  One simple but underused solution is
  standardizing the variables *before*
  forming the product term [@friedrich_defense_1982].

- The confidence intervals are formed using
  ordinary least squares (OLS), which does not
  take into account the sampling variation
  of the standardizers (the sample standard
  deviations used in standardization) and
  so the standard errors may be
  biased [@yuan_biases_2011].
  Although there
  are situations in which the OLS
  confidence and the nonparametric
  percentile bootstrap confidences can be
  similar (e.g., sample size is large
  and the population values are not extreme),
  it is recommended to use bootstrap
  confidence intervals when computation
  cost is low [@jones_computing_2013].

- There are cases in which some variabLes
  are measured by meaningful units and
  do not need to be standardized. For
  example, if `cov1` is age measured by
  year, then age is more
  meaningful than "standardized age".

- In regression models, categorical variables
  are usually represented by dummy variables,
  each of them having only two possible
  values (0 or 1). It is not meaningful
  to standardize the dummy variables
  [@darlington_regression_2016].

# Beta-Select by `lm_betaselect()`

The function `lm_betaselect()` can be used
to solve these problems by:

- standardizing variables before product
  terms are formed,

- standardizing only variables for which
  standardization can facilitate
  interpretation, and

- forming bootstrap confidence intervals
  that take
  into account selected standardization.

We call the coefficients computed by
this kind of standardization *beta*s-select
($\beta{s}_{Select}$, $\beta_{Select}$
in singular form),
to differentiate them from coefficients
computed by standardizing all variables,
including product terms.

## Estimates Only

Suppose we only need to
solve the first problem, standardizing all
numeric variables,
with the product
term computed after `iv`, `mod`, and `dv`
are standardized.

```{r, results = FALSE}
lm_beta_select <- lm_betaselect(dv ~ iv*mod + cov1 + cat1,
                                data = data_test_mod_cat2,
                                do_boot = FALSE)
```

The function `lm_betaselect()` can be
used as `lm()`, with applicable arguments
such as the model formula and `data` passed
to `lm()`.

By default, *all* numeric variables will
be standardized before fitting the models.
Terms such as product terms are created
*after* standardization.

Moreover, categorical variables (factors and
string variables) will not be standardized.

Bootstrapping is done by default. In this
illustration, `do_boot = FALSE` is added
to disable it because we only want to
address the first problem. We will do bootstrapping when
addressing the issue with confidence intervals.

The `summary()` method can be used
ont the output of `lm_betaselect()`:

```{r}
summary(lm_beta_select)
```

```{r, echo = FALSE}
tmp <- capture.output(suppressWarnings(print(summary(lm_beta_select))))
```

```{r, echo = FALSE}
b_select <- coef(lm_beta_select)
b_std <- coef(lm_std_common)
```

Compared to the solution with the product
term standardized, the coefficient of
`iv:mod` changed substantially from
`r format_str(b_std["iv_x_mod"])` to
`r format_str(b_select["iv:mod"])`. As shown by
@cheung_improving_2022, the coefficient
of *standardized* product term (`iv:mod`)
can be substantially different from the
properly standardized product term
(the product of standardized `iv` and
standardized `mod`).

## Estimates and Bootstrap Confidence Interval

Suppose we want to address
both the first and the second problems,
with

- the product term computed after `iv`,
  `mod`, and `dv` are standardized, and

- bootstrap confidence interval used.

We can call `lm_betaselect()` again, with
additional arguments
set:

```{r results = FALSE}
lm_beta_select_boot <- lm_betaselect(dv ~ iv*mod + cov1 + cat1,
                                     data = data_test_mod_cat2,
                                     bootstrap = 5000,
                                     iseed = 4567)
```

These are the additional arguments:

- `bootstrap`: The number of bootstrap
  samples to draw. Default is 100. It should
  be set to 5000 or even 10000.

- `iseed`: The seed for the random number
  generator used in bootstrapping. Set
  this to an integer to make the results
  reproducible.

```{r, echo = FALSE}
tmp <- capture.output(suppressWarnings(print(summary(lm_beta_select_boot))))
```

This is the output of `summary()`

```{r}
summary(lm_beta_select_boot)
```

By default, 95% percentile bootstrap
confidence intervals are printed
(`CI.Lower` and `CI.Upper`). The *p*-values
(`Pr(Boot)`) are asymmetric bootstrap
*p*-values [@asparouhov_bootstrap_2021].

## Estimates and Bootstrap Confidence Intervals, With Only Selected Variables Standardized

Suppose we want to address also the
the third issue, and standardize only
some of the variables. This can be
done using either `to_standardize`
or `not_to_standardize`.

- Use `to_standardize` when
the number of variables to standardize
is much fewer than number of the variables
not to standardize.

- Use `not_to_standardize`
when the number of variables to standardize
is much more than the number of
variables not to standardize.

For example, suppose we only
need to standardize `dv` and
`iv`,
this is the call to do
this, setting
`to_standardize` to `c("iv", "dv")`:

```{r results = FALSE}
lm_beta_select_boot_1 <- lm_betaselect(dv ~ iv*mod + cov1 + cat1,
                                       data = data_test_mod_cat2,
                                       to_standardize = c("dv", "iv"),
                                       bootstrap = 5000,
                                       iseed = 4567)
```

If we want to standardize all
variables except for `mod`
and `cov1`, we can use
this call, and set
`not_to_standardize` to `c("mod", "cov1")`:

```{r, results = FALSE}
lm_beta_select_boot_2 <- lm_betaselect(dv ~ iv*mod + cov1 + cat1,
                                       data = data_test_mod_cat2,
                                       not_to_standardize = c("mod", "cov1"),
                                       bootstrap = 5000,
                                       iseed = 4567)
```

The results of these calls are identical,
and only those of the first version are
printed:

```{r}
summary(lm_beta_select_boot_1)
```

For *beta*s-*select*, researchers need
to state which variables
are standardized and which are not.
This can be done in table notes.

## Categorical Variables

When calling `lm_betaselect()`,
categorical variables (factors and
string variables) will never be standardized.

In the example above, the coefficients
of the two dummy variables when both
the dummy variables and the outcome
variables are standardized are
`r format_str(b_std["cat_gp2"])` and
`r format_str(b_std["cat_gp3"])`:

```{r}
printCoefmat(lm_std_common_summary$coefficients[5:6, ],
             digits = 5,
             zap.ind = 1,
             P.values = TRUE,
             has.Pvalue = TRUE,
             signif.stars = TRUE)
```

These two values are not interpretable
because it does not make sense to talk
about a "one-SD change" in the dummy variables.

The *beta*s-*Select* of the dummy variables,
with only the outcome variable standardized,
are
`r format_str(b_select["cat1gp2"])` and
`r format_str(b_select["cat1gp3"])`.

```{r}
lm_beta_select_boot_summary <- summary(lm_beta_select_boot)
printCoefmat(lm_beta_select_boot_summary$coefficients[5:6, ],
             digits = 5,
             zap.ind = 1,
             P.values = TRUE,
             has.Pvalue = TRUE,
             signif.stars = TRUE)
```

They
represent the difference between `gp2`
and `gp3` from the reference group,
`gp1`, on the *standardized* outcome variable.
That is, their meanings are the same before
and after standardization. The only difference
is in the unit of the outcome variable.

# Conclusion

In regression analysis, there
are situations in which standardizing
all variables is not appropriate, or
when standardization needs to be done
before forming product terms. We are
not aware of tools that can do appropriate
standardization *and* form confidence
intervals that takes into account the
selective standardization. By promoting
the use of *beta*s-*select* using
`lm_betaselect()`, we hope to make it
easier for researchers to do appropriate
standardization when reporting regression
results.

# References
